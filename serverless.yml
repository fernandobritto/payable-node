service: payable-node
variablesResolutionMode: 20210326
frameworkVersion: ^3.3.0

plugins:
  - serverless-domain-manager
  - serverless-dynamodb-local
  - serverless-s3-local
  - serverless-plugin-lambda-insights
  - serverless-prune-plugin
  - serverless-offline #needs to be last in the list+

useDotenv: true
configValidationMode: warn

package:
  individually: true
  excludeDevDependencies: true
  patterns:
    - node_modules/**
    - src/**
    - '!.github/**'
    - '!.vscode/**'
    - '!coverage/**'
    - '!dist-*/**'
    - '!resources/**'
    - '!test/**'
    - '!.editorconfig'
    - '!.eslintrc.json'
    - '!.gitignore'
    - '!.nvmrc'
    - '!.prettier*'
    - '!jest.config.js'
    - '!package.json'
    - '!package-lock.json'
    - '!Jenkinsfile'
    - '!jenkins.env'
    - '!README.md'
    - '!scripts.sh'
    - '!serverless.yml'

provider:
  name: aws
  region: ${opt:region}
  stage: ${opt:stage}
  runtime: nodejs14.x
  versionFunctions: true
  logRetentionInDays: 5
  lambdaHashingVersion: 20201221
  timeout: 60
  stackName: serverless-${self:service}-${self:provider.stage}
  memorySize: 128
  tracing:
    apiGateway: true
  apiGateway:
    apiKeys: ${file(./resources/serverless.${self:provider.stage}.yml):apiGateway.apiKeys, ''}
    apiKeySourceType: HEADER
    disableDefaultEndpoint: true
  stackTags:
    Tier: backend
    Environment: ${file(./resources/serverless.${self:provider.stage}.yml):tags.Environment, ''}
    Squad: recommendation
    Product: ${self:service}
    Name: ${self:service}
    App: ${self:service}
    Account: ${file(./resources/serverless.${self:provider.stage}.yml):tags.Account, ''}
    Service-Provided: lambda
  deploymentBucket:
    name: sls.${self:provider.region}.${self:provider.stage}.deployment
  # vpc: ${file(./resources/serverless.${self:provider.stage}.yml):provider.vpc, ''}
  environment: ${file(./resources/serverless.${self:provider.stage}.yml):environment, ''}
  logs:
    restApi:
      accessLogging: false
      executionLogging: true
  iam:
    role: ${file(./resources/serverless.${self:provider.stage}.yml):provider.iam.role, ''}

functions:
  - ${file(functions.yml)}

resources: ${file(./resources/serverless.${self:provider.stage}.yml):resources, ''}

custom:
  lambdaInsights:
    defaultLambdaInsights: true
  prune:
    automatic: true
    number: 3
  customDomain: ${file(./resources/serverless.${self:provider.stage}.yml):custom.customDomain, ''}
  s3:
    host: localhost
    directory: ./s3-local
  dynamodb:
    stages:
      - dev
    start:
      migrate: true
      seed: true
    seed:
      domain:
        sources:
          - table: 'payable-node-consumer'
            sources: [./resources/seeds/consumers.json]
          - table: 'payable-node-creditor'
            sources: [./resources/seeds/creditors.json]

  endpoints:
    dynamodb-url: 'http://localhost:8080'
